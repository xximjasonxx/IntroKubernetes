## 1. Create a Dockerfile for our application
FROM mcr.microsoft.com/dotnet/sdk:6.0 as base
WORKDIR /code

COPY . .
RUN dotnet publish --configuration Release -o /output

FROM mcr.microsoft.com/dotnet/aspnet:6.0 as final
WORKDIR /app

COPY --from=base /output .
EXPOSE 80
EXPOSE 443

CMD [ "dotnet", "PeopleSaver.dll" ]

## 2. Build and Push the Image (we need to use ACR build due to M1)
az acr build --registry acraksintro --file Dockerfile --image peoplesaver:v1 .

## 3. Create a Deployment for the Pods - peoplesaver.deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: peoplesaver-deployment
  namespace: peoplesaver
  labels:
    app: peoplesaver

spec:
  replicas: 3
  selector:
    matchLabels:
      app: peoplesaver
  template:
    metadata:
      labels:
        app: peoplesaver

    spec:
      containers:
        - name: main
          image: acraksintro.azurecr.io/peoplesaver:v1
          ports:
            - containerPort: 80
            - containerPort: 443
          env:
            - name: ConnectionString
              valueFrom:
                secretKeyRef:
                  name: peoplesaver-connectionstring
                  key: connectionString
      restartPolicy: Always
      
## 4. Add a Service of type __LoadBalancer__ - peoplesaver.service.yaml
apiVersion: v1
kind: Service
metadata:
  name: peoplesaver-service
  namespace: peoplesaver
  labels:
    app: peoplesaver

spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app: peoplesaver

## 5. Access the site over the public IP created by Azure

## 6. Update the Service to use ClusterIP - this makes it private
apiVersion: v1
kind: Service
metadata:
  name: peoplesaver-service
  namespace: peoplesaver
  labels:
    app: peoplesaver

spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app: peoplesaver

## 7. Add an Ingress to expose our application
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: peoplesaver-ingress
  namespace: peoplesaver
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /

spec:
  ingressClassName: nginx
  rules:
    - host: 20.121.93.208.nip.io
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: peoplesaver-service
              port:
                number: 80

## 8. Visit the site through Ingress External IP

## 9. Add a certificate for our SSL
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: peoplesaver-farrellsoft-dev
  namespace: peoplesaver

spec:
  secretName: peoplesaver-farrellsoft-dev-tls
  issuerRef:
    name: peoplesaver-issuer-production
    kind: Issuer
  dnsNames:
    - peoplesaver.farrellsoft.dev

## 10. Update Ingress to use the SSL cert
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: peoplesaver-ingress
  namespace: peoplesaver
  annotations:
    kubernetes.io/tls-acme: "true"

    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    cert-manager.io/issuer: peoplesaver-issuer-production

spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - peoplesaver.farrellsoft.dev
    secretName: peoplesaver-farrellsoft-dev-tls
  
  rules:
    - host: peoplesaver.farrellsoft.dev
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: peoplesaver-service
              port:
                number: 80